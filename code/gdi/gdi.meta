META_FUNCTION(GDI_Get_SRGB_Format, gdi_format Format) -> gdi_format {
	static const gdi_format Formats[] = {
		META_FOR(gdi_format, flags: NoBraces) {
			META_IF(META_CONTAINS_TAG(HasSRGB)) {
				GDI_FORMAT_${META_ENTRY_SHORT_NAME_SUBSTR_CHAR(_)}_SRGB,
			} META_ELSE {
				${META_ENTRY_NAME},
			}
		}
	};
	Assert(Format < Array_Count(Formats));
	return Formats[Format];
}

META_FUNCTION(GDI_Is_Depth_Format, gdi_format Format) -> b32 {
	static const b32 IsDepthFormat[] = {
		META_FOR(gdi_format, flags: NoBraces) {
			META_IF(META_CONTAINS_TAG(HasDepth)) {
				true,
			} META_ELSE {
				false,
			}
		}
	};
	Assert(Format < Array_Count(IsDepthFormat));
	return IsDepthFormat[Format];
}

META_FUNCTION(GDI_Get_Format_Size, gdi_format Format) -> size_t {
	static const size_t Sizes[] = {
		META_FOR(gdi_format, flags: NoBraces) {
			${META_GET_TAG_VALUE(size)},
		}
	};
	Assert(Format < Array_Count(Sizes));
	return Sizes[Format];
}

META_FUNCTION(GDI_Is_Bind_Group_Type_Writable, gdi_bind_group_type Type) -> b32 {
	static const b32 IsWritable[] = {
		META_FOR(gdi_bind_group_type, flags: NoBraces) {
			${META_GET_TAG_VALUE(is_writable)},
		}
	};
	Assert(Type < Array_Count(IsWritable));
	return IsWritable[Type];
}