global PFN_vkGetInstanceProcAddr vkGetInstanceProcAddr;
global PFN_vkEnumerateInstanceExtensionProperties vkEnumerateInstanceExtensionProperties;
global PFN_vkEnumerateInstanceLayerProperties vkEnumerateInstanceLayerProperties;
global PFN_vkCreateInstance vkCreateInstance;
global PFN_vkDestroyInstance vkDestroyInstance;
global PFN_vkEnumeratePhysicalDevices vkEnumeratePhysicalDevices;
global PFN_vkGetPhysicalDeviceProperties vkGetPhysicalDeviceProperties;
global PFN_vkEnumerateDeviceExtensionProperties vkEnumerateDeviceExtensionProperties;
global PFN_vkGetPhysicalDeviceQueueFamilyProperties vkGetPhysicalDeviceQueueFamilyProperties;
global PFN_vkCreateDevice vkCreateDevice;
global PFN_vkGetPhysicalDeviceMemoryProperties vkGetPhysicalDeviceMemoryProperties;
global PFN_vkGetDeviceProcAddr vkGetDeviceProcAddr;
global PFN_vkGetPhysicalDeviceFeatures2KHR vkGetPhysicalDeviceFeatures2KHR;
global PFN_vkGetDeviceQueue vkGetDeviceQueue;
global PFN_vkDestroyDevice vkDestroyDevice;
global PFN_vkCreateCommandPool vkCreateCommandPool;
global PFN_vkAllocateCommandBuffers vkAllocateCommandBuffers;
global PFN_vkCreateFence vkCreateFence;
global PFN_vkCreateSemaphore vkCreateSemaphore;
global PFN_vkResetCommandPool vkResetCommandPool;
global PFN_vkBeginCommandBuffer vkBeginCommandBuffer;
global PFN_vkCmdPipelineBarrier vkCmdPipelineBarrier;
global PFN_vkCmdExecuteCommands vkCmdExecuteCommands;
global PFN_vkEndCommandBuffer vkEndCommandBuffer;
global PFN_vkQueueSubmit vkQueueSubmit;
global PFN_vkWaitForFences vkWaitForFences;
global PFN_vkGetFenceStatus vkGetFenceStatus;
global PFN_vkResetFences vkResetFences;
global PFN_vkCreateImageView vkCreateImageView;
global PFN_vkAllocateMemory vkAllocateMemory;
global PFN_vkFreeMemory vkFreeMemory;
global PFN_vkMapMemory vkMapMemory;
global PFN_vkUnmapMemory vkUnmapMemory;
global PFN_vkFlushMappedMemoryRanges vkFlushMappedMemoryRanges;
global PFN_vkInvalidateMappedMemoryRanges vkInvalidateMappedMemoryRanges;
global PFN_vkBindBufferMemory vkBindBufferMemory;
global PFN_vkBindImageMemory vkBindImageMemory;
global PFN_vkGetBufferMemoryRequirements vkGetBufferMemoryRequirements;
global PFN_vkGetImageMemoryRequirements vkGetImageMemoryRequirements;
global PFN_vkCreateBuffer vkCreateBuffer;
global PFN_vkDestroyBuffer vkDestroyBuffer;
global PFN_vkCreateImage vkCreateImage;
global PFN_vkDestroyImage vkDestroyImage;
global PFN_vkCmdCopyBuffer vkCmdCopyBuffer;
global PFN_vkCmdCopyBufferToImage vkCmdCopyBufferToImage;
global PFN_vkCreateSampler vkCreateSampler;
global PFN_vkCreateDescriptorSetLayout vkCreateDescriptorSetLayout;
global PFN_vkCreateDescriptorPool vkCreateDescriptorPool;
global PFN_vkAllocateDescriptorSets vkAllocateDescriptorSets;
global PFN_vkUpdateDescriptorSets vkUpdateDescriptorSets;
global PFN_vkCreateShaderModule vkCreateShaderModule;
global PFN_vkCreatePipelineLayout vkCreatePipelineLayout;
global PFN_vkCreateGraphicsPipelines vkCreateGraphicsPipelines;
global PFN_vkDestroyPipelineLayout vkDestroyPipelineLayout;
global PFN_vkDestroyShaderModule vkDestroyShaderModule;
global PFN_vkCmdBindPipeline vkCmdBindPipeline;
global PFN_vkCmdBindDescriptorSets vkCmdBindDescriptorSets;
global PFN_vkCmdBindVertexBuffers vkCmdBindVertexBuffers;
global PFN_vkCmdBindIndexBuffer vkCmdBindIndexBuffer;
global PFN_vkCmdDrawIndexed vkCmdDrawIndexed;
global PFN_vkCmdPushConstants vkCmdPushConstants;
global PFN_vkCmdSetViewport vkCmdSetViewport;
global PFN_vkCmdSetScissor vkCmdSetScissor;
global PFN_vkCreateComputePipelines vkCreateComputePipelines;
global PFN_vkCmdDispatch vkCmdDispatch;
global PFN_vkDestroyDescriptorSetLayout vkDestroyDescriptorSetLayout;
global PFN_vkCmdCopyImageToBuffer vkCmdCopyImageToBuffer;
global PFN_vkCreateDebugUtilsMessengerEXT vkCreateDebugUtilsMessengerEXT;
global PFN_vkDestroyDebugUtilsMessengerEXT vkDestroyDebugUtilsMessengerEXT;
global PFN_vkDestroySurfaceKHR vkDestroySurfaceKHR;
global PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR vkGetPhysicalDeviceSurfaceCapabilitiesKHR;
global PFN_vkGetPhysicalDeviceSurfaceFormatsKHR vkGetPhysicalDeviceSurfaceFormatsKHR;
global PFN_vkGetPhysicalDeviceSurfacePresentModesKHR vkGetPhysicalDeviceSurfacePresentModesKHR;
global PFN_vkGetPhysicalDeviceSurfaceSupportKHR vkGetPhysicalDeviceSurfaceSupportKHR;
global PFN_vkAcquireNextImageKHR vkAcquireNextImageKHR;
global PFN_vkCreateSwapchainKHR vkCreateSwapchainKHR;
global PFN_vkDestroySwapchainKHR vkDestroySwapchainKHR;
global PFN_vkGetSwapchainImagesKHR vkGetSwapchainImagesKHR;
global PFN_vkQueuePresentKHR vkQueuePresentKHR;
global PFN_vkCmdPipelineBarrier2KHR vkCmdPipelineBarrier2KHR;
global PFN_vkCmdBeginRenderingKHR vkCmdBeginRenderingKHR;
global PFN_vkCmdEndRenderingKHR vkCmdEndRenderingKHR;
global PFN_vkCmdPushDescriptorSetKHR vkCmdPushDescriptorSetKHR;
typedef struct vk_texture_pool vk_texture_pool;
struct vk_texture_pool {
	gdi_pool Pool;
	vk_texture Entries[65334];
};
typedef struct vk_texture_delete_queue_entry vk_texture_delete_queue_entry;
struct vk_texture_delete_queue_entry {
	vk_texture Entry;
	vk_texture_delete_queue_entry* Next;
};
typedef struct vk_texture_delete_queue vk_texture_delete_queue;
struct vk_texture_delete_queue {
	vk_texture_delete_queue_entry* First;
	vk_texture_delete_queue_entry* Last;
};
typedef struct vk_texture_view_pool vk_texture_view_pool;
struct vk_texture_view_pool {
	gdi_pool Pool;
	vk_texture_view Entries[65334];
};
typedef struct vk_texture_view_delete_queue_entry vk_texture_view_delete_queue_entry;
struct vk_texture_view_delete_queue_entry {
	vk_texture_view Entry;
	vk_texture_view_delete_queue_entry* Next;
};
typedef struct vk_texture_view_delete_queue vk_texture_view_delete_queue;
struct vk_texture_view_delete_queue {
	vk_texture_view_delete_queue_entry* First;
	vk_texture_view_delete_queue_entry* Last;
};
typedef struct vk_buffer_pool vk_buffer_pool;
struct vk_buffer_pool {
	gdi_pool Pool;
	vk_buffer Entries[65334];
};
typedef struct vk_buffer_delete_queue_entry vk_buffer_delete_queue_entry;
struct vk_buffer_delete_queue_entry {
	vk_buffer Entry;
	vk_buffer_delete_queue_entry* Next;
};
typedef struct vk_buffer_delete_queue vk_buffer_delete_queue;
struct vk_buffer_delete_queue {
	vk_buffer_delete_queue_entry* First;
	vk_buffer_delete_queue_entry* Last;
};
typedef struct vk_sampler_pool vk_sampler_pool;
struct vk_sampler_pool {
	gdi_pool Pool;
	vk_sampler Entries[65334];
};
typedef struct vk_sampler_delete_queue_entry vk_sampler_delete_queue_entry;
struct vk_sampler_delete_queue_entry {
	vk_sampler Entry;
	vk_sampler_delete_queue_entry* Next;
};
typedef struct vk_sampler_delete_queue vk_sampler_delete_queue;
struct vk_sampler_delete_queue {
	vk_sampler_delete_queue_entry* First;
	vk_sampler_delete_queue_entry* Last;
};
typedef struct vk_bind_group_layout_pool vk_bind_group_layout_pool;
struct vk_bind_group_layout_pool {
	gdi_pool Pool;
	vk_bind_group_layout Entries[65334];
};
typedef struct vk_bind_group_layout_delete_queue_entry vk_bind_group_layout_delete_queue_entry;
struct vk_bind_group_layout_delete_queue_entry {
	vk_bind_group_layout Entry;
	vk_bind_group_layout_delete_queue_entry* Next;
};
typedef struct vk_bind_group_layout_delete_queue vk_bind_group_layout_delete_queue;
struct vk_bind_group_layout_delete_queue {
	vk_bind_group_layout_delete_queue_entry* First;
	vk_bind_group_layout_delete_queue_entry* Last;
};
typedef struct vk_bind_group_pool vk_bind_group_pool;
struct vk_bind_group_pool {
	gdi_pool Pool;
	vk_bind_group Entries[65334];
};
typedef struct vk_bind_group_delete_queue_entry vk_bind_group_delete_queue_entry;
struct vk_bind_group_delete_queue_entry {
	vk_bind_group Entry;
	vk_bind_group_delete_queue_entry* Next;
};
typedef struct vk_bind_group_delete_queue vk_bind_group_delete_queue;
struct vk_bind_group_delete_queue {
	vk_bind_group_delete_queue_entry* First;
	vk_bind_group_delete_queue_entry* Last;
};
typedef struct vk_shader_pool vk_shader_pool;
struct vk_shader_pool {
	gdi_pool Pool;
	vk_shader Entries[65334];
};
typedef struct vk_shader_delete_queue_entry vk_shader_delete_queue_entry;
struct vk_shader_delete_queue_entry {
	vk_shader Entry;
	vk_shader_delete_queue_entry* Next;
};
typedef struct vk_shader_delete_queue vk_shader_delete_queue;
struct vk_shader_delete_queue {
	vk_shader_delete_queue_entry* First;
	vk_shader_delete_queue_entry* Last;
};
typedef struct vk_resource_pool vk_resource_pool;
struct vk_resource_pool {
	vk_texture_pool TexturePool;
	vk_texture_view_pool Texture_ViewPool;
	vk_buffer_pool BufferPool;
	vk_sampler_pool SamplerPool;
	vk_bind_group_layout_pool Bind_Group_LayoutPool;
	vk_bind_group_pool Bind_GroupPool;
	vk_shader_pool ShaderPool;
};
function void Vk_Instance_Funcs_Load(VkInstance Instance);
function void Vk_Khr_Get_Physical_Device_Properties2_Funcs_Load(VkInstance Instance);
function void Vk_Device_Funcs_Load(VkDevice Device);
function void Vk_Ext_Debug_Utils_Funcs_Load(VkInstance Instance);
function void Vk_Khr_Surface_Funcs_Load(VkInstance Instance);
function void Vk_Khr_Swapchain_Funcs_Load(VkDevice Device);
function void Vk_Khr_Synchronization2_Funcs_Load(VkDevice Device);
function void Vk_Khr_Dynamic_Rendering_Funcs_Load(VkDevice Device);
function void Vk_Khr_Push_Descriptor_Funcs_Load(VkDevice Device);
function void VK_Load_Library_Funcs(os_library* Library);
function void VK_Load_Global_Funcs();
function void VK_Texture_Pool_Init(vk_texture_pool* Pool, arena* Arena);
function gdi_handle VK_Texture_Pool_Allocate(vk_resource_pool* Pool);
function void VK_Texture_Pool_Free(vk_resource_pool* Pool, gdi_handle Handle);
function vk_texture* VK_Texture_Pool_Get(vk_resource_pool* Pool, gdi_handle Handle);
function void VK_Texture_Add_To_Delete_Queue(vk_gdi* GDI, gdi_handle Handle);
function void VK_Texture_View_Pool_Init(vk_texture_view_pool* Pool, arena* Arena);
function gdi_handle VK_Texture_View_Pool_Allocate(vk_resource_pool* Pool);
function void VK_Texture_View_Pool_Free(vk_resource_pool* Pool, gdi_handle Handle);
function vk_texture_view* VK_Texture_View_Pool_Get(vk_resource_pool* Pool, gdi_handle Handle);
function void VK_Texture_View_Add_To_Delete_Queue(vk_gdi* GDI, gdi_handle Handle);
function void VK_Buffer_Pool_Init(vk_buffer_pool* Pool, arena* Arena);
function gdi_handle VK_Buffer_Pool_Allocate(vk_resource_pool* Pool);
function void VK_Buffer_Pool_Free(vk_resource_pool* Pool, gdi_handle Handle);
function vk_buffer* VK_Buffer_Pool_Get(vk_resource_pool* Pool, gdi_handle Handle);
function void VK_Buffer_Add_To_Delete_Queue(vk_gdi* GDI, gdi_handle Handle);
function void VK_Sampler_Pool_Init(vk_sampler_pool* Pool, arena* Arena);
function gdi_handle VK_Sampler_Pool_Allocate(vk_resource_pool* Pool);
function void VK_Sampler_Pool_Free(vk_resource_pool* Pool, gdi_handle Handle);
function vk_sampler* VK_Sampler_Pool_Get(vk_resource_pool* Pool, gdi_handle Handle);
function void VK_Sampler_Add_To_Delete_Queue(vk_gdi* GDI, gdi_handle Handle);
function void VK_Bind_Group_Layout_Pool_Init(vk_bind_group_layout_pool* Pool, arena* Arena);
function gdi_handle VK_Bind_Group_Layout_Pool_Allocate(vk_resource_pool* Pool);
function void VK_Bind_Group_Layout_Pool_Free(vk_resource_pool* Pool, gdi_handle Handle);
function vk_bind_group_layout* VK_Bind_Group_Layout_Pool_Get(vk_resource_pool* Pool, gdi_handle Handle);
function void VK_Bind_Group_Layout_Add_To_Delete_Queue(vk_gdi* GDI, gdi_handle Handle);
function void VK_Bind_Group_Pool_Init(vk_bind_group_pool* Pool, arena* Arena);
function gdi_handle VK_Bind_Group_Pool_Allocate(vk_resource_pool* Pool);
function void VK_Bind_Group_Pool_Free(vk_resource_pool* Pool, gdi_handle Handle);
function vk_bind_group* VK_Bind_Group_Pool_Get(vk_resource_pool* Pool, gdi_handle Handle);
function void VK_Bind_Group_Add_To_Delete_Queue(vk_gdi* GDI, gdi_handle Handle);
function void VK_Shader_Pool_Init(vk_shader_pool* Pool, arena* Arena);
function gdi_handle VK_Shader_Pool_Allocate(vk_resource_pool* Pool);
function void VK_Shader_Pool_Free(vk_resource_pool* Pool, gdi_handle Handle);
function vk_shader* VK_Shader_Pool_Get(vk_resource_pool* Pool, gdi_handle Handle);
function void VK_Shader_Add_To_Delete_Queue(vk_gdi* GDI, gdi_handle Handle);
function void VK_Resource_Pool_Init(vk_resource_pool* Pool, arena* Arena);
function gdi_format VK_Get_GDI_Format(VkFormat Format);
function VkFilter VK_Get_Filter(gdi_filter Filter);
function VkSamplerMipmapMode VK_Get_Mipmap_Mode(gdi_filter Filter);
function VkFormat VK_Get_Format(gdi_format Entry);
function VkSamplerAddressMode VK_Get_Address_Mode(gdi_address_mode Entry);
function VkDescriptorType VK_Get_Descriptor_Type(gdi_bind_group_type Entry);
function VkCompareOp VK_Get_Compare_Func(gdi_compare_func Entry);
function VkIndexType VK_Get_Idx_Type(gdi_idx_format Entry);
function VkPrimitiveTopology VK_Get_Primitive(gdi_primitive Entry);
function VkBlendFactor VK_Get_Blend(gdi_blend Entry);
function void VK_Delete_Queued_Thread_Resources(vk_gdi* GDI, vk_delete_thread_context* DeleteContext);
